/**
 * Represents a collection of CSS at-rules.

 *  */
export const AtRules = {
  charset: "@charset",
  import: "@import",
  namespace: "@namespace",
  keyframes: "@keyframes",
  viewport: "@viewport",
  counterStyle: "@counter-style",
  fontFace: "@font-face",
  supports: "@supports",
  document: "@document",
  page: "@page",
  media: "@media",
  fontFeatureValues: "@font-feature-values",
  swash: "@swash",
  ornaments: "@ornaments",
  annotation: "@annotation",
  stylistic: "@stylistic",
  styleset: "@styleset",
  characterVariant: "@character-variant",
  container: "@container",
};

/**
 * Represents a collection of pseudo-elements used in CSS rules.

 *  */
export const PseudoElements = {
  mozSelection: "::moz-selection",
  mozPlaceholder: "::moz-placeholder",
  mozFocusInner: "::moz-focus-inner",
  mozFocusOuter: "::moz-focus-outer",
  mozTreeCellText: "::moz-tree-cell-text",
  mozTreeCellTextHover: "::moz-tree-cell-text(hover)",
  mozTreeCellTextSelected: "::moz-tree-cell-text(selected)",
  mozTreeCellTextLoading: "::moz-tree-cell-text(loading)",
  mozTreeCellTextHoverSelected: "::moz-tree-cell-text(hover, selected)",
  mozTreeCellTextHoverLoading: "::moz-tree-cell-text(hover, loading)",
  mozTreeCellTextSelectedLoading: "::moz-tree-cell-text(selected, loading)",
  mozTreeCellTextHoverSelectedLoading:
    "::moz-tree-cell-text(hover, selected, loading)",
  mozTreeRowHover: "::moz-tree-row(hover)",
  mozTreeRowSelected: "::moz-tree-row(selected)",
  mozTreeRowLoading: "::moz-tree-row(loading)",
  mozTreeRowHoverSelected: "::moz-tree-row(hover, selected)",
  mozTreeRowHoverLoading: "::moz-tree-row(hover, loading)",
  mozTreeRowSelectedLoading: "::moz-tree-row(selected, loading)",
  mozTreeRowHoverSelectedLoading: "::moz-tree-row(hover, selected, loading)",
  webkitInputPlaceholder: "::webkit-input-placeholder",
  webkitProgressBar: "::webkit-progress-bar",
  webkitProgressValue: "::webkit-progress-value",
  webkitProgressBarValue: "::webkit-progress-bar-value",
  webkitMeterBar: "::webkit-meter-bar",
  webkitMeterOptimumValue: "::webkit-meter-optimum-value",
  webkitContactsAutoCompleteContainer:
    "::webkit-contacts-auto-complete-container",
  webkitContactsAutoCompleteEntry: "::webkit-contacts-auto-complete-entry",
  webkitContactsAutoCompleteButton: "::webkit-contacts-auto-complete-button",
  webkitContactsAutoCompleteButtonContainer:
    "::webkit-contacts-auto-complete-button-container",
  webkitContactsAutoCompleteSelectedEntry:
    "::webkit-contacts-auto-complete-selected-entry",
  after: "::after",
  before: "::before",
  firstLetter: "::first-letter",
  firstLine: "::first-line",
  selection: "::selection",
  backdrop: "::backdrop",
  placeholder: "::placeholder",
  marker: "::marker",
  spellingError: "::spelling-error",
  grammarError: "::grammar-error",
  cue: "::cue",
  cueRegion: "::cue-region",
};

/**
 * Represents a collection of pseudo classes used in CSS rules.

 *  */
export const PseudoClasses = {
  mozPlaceholder: ":-moz-placeholder",
  mozFullScreen: ":-moz-full-screen",
  mozFocusInner: ":-moz-focus-inner",
  mozFocusOuter: ":-moz-focus-outer",
  mozRangeProgress: "::-moz-range-progress",
  mozRangeThumb: "::-moz-range-thumb",
  mozRangeTrack: "::-moz-range-track",
  mozRangeTrackContainer: "::-moz-range-trackcontainer",
  mozRangeTrackTick: "::-moz-range-tracktick",
  mozRangeTrackThumb: "::-moz-range-trackthumb",
  mozMeterBar: "::-moz-meter-bar",
  mozMeterEven: "::-moz-meter-even",
  mozMeterOptimum: "::-moz-meter-optimum",
  mozMeterSubOptimum: "::-moz-meter-sub-optimum",
  mozMeterSubSubOptimum: "::-moz-meter-sub-sub-optimum",
  webkitInnerSpinButton: "::-webkit-inner-spin-button",
  webkitOuterSpinButton: "::-webkit-outer-spin-button",
  webkitSearchCancelButton: "::-webkit-search-cancel-button",
  webkitSearchDecoration: "::-webkit-search-decoration",
  webkitColorSwatch: "::-webkit-color-swatch",
  webkitColorSwatchWrapper: "::-webkit-color-swatch-wrapper",
  webkitScrollbar: "::-webkit-scrollbar",
  webkitScrollbarButton: "::-webkit-scrollbar-button",
  webkitScrollbarThumb: "::-webkit-scrollbar-thumb",
  webkitScrollbarCorner: "::-webkit-scrollbar-corner",
  webkitScrollbarTrack: "::-webkit-scrollbar-track",
  webkitScrollbarTrackPiece: "::-webkit-scrollbar-track-piece",
  webkitScrollbarThumbVertical: "::-webkit-scrollbar-thumb-vertical",
  webkitScrollbarThumbHorizontal: "::-webkit-scrollbar-thumb-horizontal",
  webkitScrollbarThumbThumb: "::-webkit-scrollbar-thumb-thumb",
  webkitScrollbarThumbStart: "::-webkit-scrollbar-thumb-start",
  webkitScrollbarThumbEnd: "::-webkit-scrollbar-thumb-end",
  webkitScrollbarTrackStart: "::-webkit-scrollbar-track-start",
  webkitScrollbarTrackEnd: "::-webkit-scrollbar-track-end",
  active: ":active",
  hover: ":hover",
  focus: ":focus",
  visited: ":visited",
  link: ":link",
  firstChild: ":first-child",
  lastChild: ":last-child",
  nthChild: ":nth-child",
  nthLastChild: ":nth-last-child",
  firstOfType: ":first-of-type",
  lastOfType: ":last-of-type",
  nthOfType: ":nth-of-type",
  nthLastOfType: ":nth-last-of-type",
  onlyChild: ":only-child",
  onlyOfType: ":only-of-type",
  root: ":root",
  empty: ":empty",
  target: ":target",
  checked: ":checked",
  enabled: ":enabled",
  disabled: ":disabled",
  default: ":default",
  valid: ":valid",
  invalid: ":invalid",
  required: ":required",
  optional: ":optional",
  readOnly: ":read-only",
  readWrite: ":read-write",
  fullScreen: ":fullscreen",
  not: ":not",
  lang: ":lang",
  nthMatch: ":nth-match",
  any: ":any",
  matches: ":matches",
  dir: ":dir",
  has: ":has",
  host: ":host",
  hostContext: ":host-context",
  focusWithin: ":focus-within",
  autoFill: ":-webkit-autofill",
};

/**
 * Represents a set of CSS rules.
 * @internal
 *  */
export const CSSRulesSet = {
  AtRules,
  PseudoElements,
  PseudoClasses,
};
